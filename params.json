{"name":"Code-guide","tagline":"guidelines for flexible and maintainable HTML and CSS","body":"# Code Guide\r\n_Guidelines for flexible and maintainable HTML and CSS_\r\n\r\n### Every line of code should appear to be written by a single person, no matter the number of contributors.[*](http://mdo.github.io/code-guide/)\r\n\r\n---\r\n\r\n# TL;DR\r\n\r\n* **High-Level**\r\n  * [HTML](#html) / [CSS](#css) formatting and syntax-related [stuff](http://docs.emmet.io/css-abbreviations/vendor-prefixes/) should be handled by [various](https://github.com/causes/scss-lint/blob/master/lib/scss_lint/linter/README.md) [linters](https://github.com/postcss/autoprefixer)\r\n  * Use meaningful [naming conventions](#naming-conventions); use structural or purposeful names over presentational\r\n  * Before you start **touching** any stylesheets, [study this thoroughly](https://github.com/itsjustmath/scalable-css-reading-list);\r\n  * We use [SCSS](#css), and our own twist on the [SUIT CSS framework](https://github.com/suitcss/suit/tree/master/doc);\r\n  * We promote the use of [OOCSS](#principles) and the [single responsibility principle](#principles)\r\n* **The Details**\r\n  * We use [`js-`](#javascript) prefixed class names for elements being relied upon for javascript selectors\r\n  * We use [`.u-`](#utilities) prefixed class names for single purpose utility classes\r\n  * Our [components](#components) use **meaningful hypens** and **camelCase**  and follow the [`<componentName>[--modifierName|-descendantName]`](#componentname) pattern\r\n  * [`.is-`](#componentnameis-stateofcomponent) prefixed classes for stateful classes (often toggled by js) like `.is-disabled`\r\n  * `$variable` names should follow the [`<property>-<value>`](#variables) pattern\r\n  * Use [`color`](#colors), [`font-family`](), [`font-size`](), [`line-height`](#line-height), and [`letter-spacing`](#letter-spacing) variables defined in the `variables.scss` file\r\n  * Mixins should be prefixed with [`.m-`](#mixins)\r\n* **Best Practices**\r\n  * Limit the use of [shorthand declarations](#shorthand-notation)\r\n  * Use white space to improve [legibility](#single-declarations)\r\n  * Avoid [`#ids`](#avoid-ids), [`!important`](#avoid-important), [child selectors](#avoid-child-selector), and [magic numbers](#avoid-magic-numbers);\r\n* **Workflows**\r\n  * Our [stylesheet directory structure](#architecture) is based on [SMACSS](https://smacss.com/book/categorizing)\r\n\r\n---\r\n\r\n# HTML\r\n\r\n## Naming Conventions [*](https://github.com/necolas/idiomatic-html)\r\n\r\n![Semantics](http://i.imgur.com/2CtFy2X.png)\r\n\r\n> Use meaningful names; use structural or purposeful names over presentational.\r\n\r\nUse clear, thoughtful, and appropriate names for HTML classes. The names should be informative both within HTML and CSS files.\r\n\r\n### Practicality over purity\r\n\r\nStrive to maintain HTML standards and semantics, but not at the expense of practicality. Use the least amount of markup with the fewest intricacies whenever possible.\r\n\r\nAvoid systematic use of abbreviated class names. Don't make things difficult to understand.\r\n\r\nExample with bad names:\r\n\r\n`<div class=\"cb s-scr\"></div>`\r\n\r\n```\r\n.s-scr {\r\n  overflow: auto;\r\n}\r\n\r\n.cb {\r\n  background: #000;\r\n}\r\n```\r\n\r\nExample with better names:\r\n\r\n`<div class=\"column-body is-scrollable\"></div>`\r\n\r\n```\r\n.is-scrollable {\r\n    overflow: auto;\r\n}\r\n\r\n.column-body {\r\n    background: #000;\r\n}\r\n```\r\n\r\n---\r\n\r\n# CSS\r\n\r\n#### Before you continue reading, I **highly recommend** you study [this reading list](https://github.com/itsjustmath/scalable-css-reading-list) - it is the go-to resource for resources related to writing scalable, object-oriented CSS.\r\n\r\n## Our Codebase\r\n\r\nAgent Ace uses a subset of [SCSS](http://sass-lang.com/) for style generation. Agent Ace's naming conventions are adapted from the work being done in the [SUIT CSS framework](https://github.com/suitcss/suit/tree/master/doc) (and [@fat](https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06) at Medium). Which is to say...\r\n> **It relies on structured class names and meaningful hyphens** (i.e., not using hyphens merely to separate words). This is to help communicate the relationships between classes.\r\n\r\n\r\n## [Principles](http://cssguidelin.es/#object-orientation)\r\n\r\n### Object-orientation\r\nObject-orientation is a programming paradigm that breaks larger programs up into smaller, in(ter)dependent objects that all have their own roles and responsibilities.\r\n\r\nWhen applied to CSS, we call it object-oriented CSS, or OOCSS (coined by Nicole Sullivan). OOCSS deals with the separation of UIs into structure and skin: breaking UI components into their underlying structural forms, and layering their cosmetic forms on separately. This means that we can recycle common and recurring design patterns very cheaply without having to necessarily recycle their specific implementation details at the same time. OOCSS promotes reuse of code, which makes us quicker, as well as keeping the size of our codebase down.\r\n\r\n### The Single Responsibility Principle\r\n\r\nThe single responsibility principle is a paradigm that, very loosely, states that all pieces of code (in our case, classes) should focus on doing one thing and one thing only. More formally:\r\n\r\n> …the single responsibility principle states that every context (class, function, variable, etc.) should have a single responsibility, and that responsibility should be entirely encapsulated by the context.\r\n\r\nWhat this means for us is that our CSS should be composed of a series of much smaller classes that focus on providing very specific and limited functionality. This means that we need to decompose UIs into their smallest component pieces that each serve a single responsibility; they all do just one job, but can be very easily combined and composed to make much more versatile and complex constructs.\r\n\r\n## Javascript\r\n\r\nsyntax: `js-<targetName>`\r\n\r\nJavaScript-specific classes reduce the risk that changing the structure or theme of components will inadvertently affect any required JavaScript behaviour and complex functionality. It is not neccesarry to use them in every case, just think of them as a tool in your utility belt. If you are creating a class, which you dont intend to use for styling, but instead only as a selector in JavaScript, you should probably be adding the js- prefix. In practice this looks like this:\r\n\r\n```\r\n<a href=\"/login\" class=\"btn btn-primary js-login\"></a>\r\n```\r\n\r\n**Again, JavaScript-specific classes should not, under any circumstances, be styled.**\r\n\r\n## Utilities\r\n\r\nAgent Ace's utility classes are **low-level structural and positional traits**. Utilities can be applied directly to any element; multiple utilities can be used together; and utilities can be used alongside component classes.\r\n\r\nUtilities exist because **certain CSS properties and patterns are used frequently**. For example: floats, containing floats, vertical alignment, text truncation. Relying on utilities can help to reduce repetition and provide consistent implementations. They also act as a philosophical alternative to functional (i.e. non-polyfill) mixins.\r\n\r\n    <div class=\"u-clearfix\">\r\n      <p class=\"u-textTruncate\">{$text}</p>\r\n      <img class=\"u-pullLeft\" src=\"{$src}\" alt=\"\">\r\n      <img class=\"u-pullLeft\" src=\"{$src}\" alt=\"\">\r\n      <img class=\"u-pullLeft\" src=\"{$src}\" alt=\"\">\r\n    </div>\r\n\r\n\r\n### u-utilityName\r\n\r\nSyntax: `u-<utilityName>`\r\n\r\nUtilities must use a camel case name, prefixed with a u namespace. What follows is an example of how various utilities can be used to create a simple structure within a component.\r\n\r\n    <div class=\"u-clearfix\">\r\n      <a class=\"u-pullLeft\" href=\"{$url}\">\r\n        <img class=\"u-block\" src=\"{$src}\" alt=\"\">\r\n      </a>\r\n      <p class=\"u-sizeFill u-textBreak\">\r\n        …\r\n      </p>\r\n    </div>\r\n\r\n\r\n## Components\r\n\r\nSyntax: `<componentName>[--modifierName|-descendantName]`\r\n\r\nComponent driven development offers several benefits when reading and writing HTML and CSS:\r\n\r\n   * It helps to distinguish between the classes for the root of the component, descendant elements, and modifications.\r\n   * It keeps the specificity of selectors low.\r\n   * It helps to decouple presentation semantics from document semantics.\r\n\r\nYou can think of components as **custom elements that enclose specific semantics, styling, and behavior**.\r\n\r\n### ComponentName\r\nThe component's name must be written in camel case.\r\n\r\n```\r\n.myComponent { /* … */ }\r\n\r\n<article class=\"myComponent\">\r\n  …\r\n</article>\r\n```\r\n\r\n### componentName--modifierName\r\nA component modifier is a class that *modifies the presentation of the base component in some form*. Modifier names must be written in camel case and be separated from the component name by two hyphens. **The class should be included in the HTML in addition to the base component class**.\r\n\r\n```\r\n/* Core button */\r\n.btn { /* … */ }\r\n\r\n/* Default button style */\r\n.btn--default { /* … */ }\r\n\r\n<button class=\"btn btn--primary\">…</button>\r\n```\r\n\r\n### componentName-descendantName\r\nA component descendant is a class that is attached to a descendant node of a component. It's responsible for applying presentation directly to the descendant on behalf of a particular component. Descendant names must be written in camel case.\r\n\r\n```\r\n<article class=\"tweet\">\r\n  <header class=\"tweet-header\">\r\n    <img class=\"tweet-avatar\" src=\"{$src}\" alt=\"{$alt}\">\r\n    …\r\n  </header>\r\n  <div class=\"tweet-body\">\r\n    …\r\n  </div>\r\n</article>\r\n```\r\n\r\n### componentName.is-stateOfComponent\r\nUse `is-stateName` for *state-based modifications of components*. The state name must be Camel case. Never style these classes directly; they should always be used as an adjoining class.\r\n\r\nJS can add/remove these classes. This means that the same state names can be used in multiple contexts, but **every component must define its own styles for the state** (as they are scoped to the component).\r\n\r\n```\r\n.tweet { /* … */ }\r\n.tweet.is-expanded { /* … */ }\r\n\r\n<article class=\"tweet is-expanded\">\r\n  …\r\n</article>\r\n```\r\n\r\n## Variables\r\n\r\nSyntax: `<property>-<value>`\r\n\r\nVariable names in our CSS are structured to provide strong associations between property and use.\r\n\r\nThe following variable definition is a `color` property, with the value `greenCaribbean`.\r\n\r\n```\r\n$color-greenCaribbean: #00BC9B;\r\n```\r\n\r\n### Colors\r\nWhen implementing feature styles, you should only be using color variables provided by colors.scss. When adding a color variable to colors.scss, use hex instead of RGB for colors.\r\n\r\nRight:\r\n\r\n```\r\ncolor: #000;\r\n```\r\n\r\nWrong:\r\n\r\n```\r\ncolor: rgba(255,255,255,.3);\r\n```\r\n\r\n### z-index scale\r\nPlease use the z-index scale defined in z-index.scss.\r\n\r\n`@zIndex-1 - @zIndex-9` are provided. Nothing should be higher then `@zIndex-9`.\r\n\r\n### Font Styles\r\n~~With the additional support of web fonts `font-weight` plays a more important role than it once did. Different font weights will render typefaces specifically created for that weight, unlike the old days where bold could be just an algorithm to fatten a typeface. Obvious uses the numerical value of `font-weight` to enable the best representation of a typeface. The following table is a guide:~~\r\n\r\n~~Raw font weights should be avoided. Instead, use the appropriate `font mixin: .font-sansI7, .font-sansN7`, etc.~~\r\n\r\n~~The suffix defines the weight and style:~~\r\n\r\n```\r\nN = normal\r\nI = italic\r\n4 = normal font-weight\r\n7 = bold font-weight\r\n```\r\n\r\nRefer to ~~type.scss~~ `variables.scss` for type size, letter-spacing, and line height. Raw sizes, spaces, and line heights should be avoided outside of ~~type.scss~~ `variables.scss`.\r\n\r\n```\r\n@fontSize-micro\r\n@fontSize-smallest\r\n@fontSize-smaller\r\n@fontSize-small\r\n@fontSize-base\r\n@fontSize-large\r\n@fontSize-larger\r\n@fontSize-largest\r\n@fontSize-jumbo\r\n```\r\n\r\n### Line Height\r\n~~type.scss~~ `variables.scss` also provides a line height scale. This should be used for blocks of text.\r\n\r\n```\r\n@lineHeight-tightest\r\n@lineHeight-tighter\r\n@lineHeight-tight\r\n@lineHeight-baseSans\r\n@lineHeight-base\r\n@lineHeight-loose\r\n@lineHeight-looser\r\n```\r\n\r\n### Letter spacing\r\nLetter spacing should also be controlled with the following var scale.\r\n\r\n```\r\n@letterSpacing-tightest\r\n@letterSpacing-tighter\r\n@letterSpacing-tight\r\n@letterSpacing-normal\r\n@letterSpacing-loose\r\n@letterSpacing-looser\r\n```\r\n\r\n### Mixins\r\nmixin syntax: `m-<propertyName>`\r\n\r\n```\r\n// this gives items a max width and centers them using margins\r\n@mixin m-centerAlign($max-width) {\r\n  display: block;\r\n  max-width: $max-width;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n```\r\n\r\n### Single declarations\r\nIn instances where a rule set includes only one declaration, consider removing line breaks for readability and faster editing\r\n\r\n```\r\n/* Single declarations on one line */\r\n.span1 { width: 60px; }\r\n.span2 { width: 140px; }\r\n.span3 { width: 220px; }\r\n\r\n/* Multiple declarations, one per line */\r\n.sprite {\r\n  display: inline-block;\r\n  width: 16px;\r\n  height: 15px;\r\n  background-image: url(../img/sprite.png);\r\n}\r\n```\r\n\r\n### Shorthand notation\r\nStrive to limit use of shorthand declarations to instances where you must explicitly set all the available values.\r\n\r\nCommon overused shorthand properties include:\r\n\r\n```\r\npadding\r\nmargin\r\nfont\r\nbackground\r\nborder\r\nborder-radius\r\n```\r\n\r\nOften times we don't need to set all the values a shorthand property represents.\r\n\r\n```\r\n/* Bad example */\r\n.element {\r\n  margin: 0 0 10px;\r\n  background: red;\r\n  background: url(\"image.jpg\");\r\n  border-radius: 3px 3px 0 0;\r\n}\r\n\r\n/* Good example */\r\n.element {\r\n  margin-bottom: 10px;\r\n  background-color: red;\r\n  background-image: url(\"image.jpg\");\r\n  border-top-left-radius: 3px;\r\n\r\n  border-top-right-radius: 3px;\r\n}\r\n```\r\n\r\n---\r\n\r\n## Architecture\r\n\r\n### [Stylesheet Directory Structure](https://smacss.com/book/categorizing)\r\n\r\n* Organize sections of code by component.\r\n* Develop a consistent commenting hierarchy.\r\n* When using multiple CSS files, break them down by component instead of page. Pages can be rearranged and components moved.\r\n* Break Into As Many Small Files As Makes Sense - there is no penalty to splitting into many small files.\r\n\r\n```\r\n├── base  // normalize.css, styling elements, global styles, typography, forms, lists and tables\r\n│   └── IE\r\n├── components  // reusable, modular design elements\r\n├── layout  // grid, layouts\r\n├── plugins  // for vendor utilities used\r\n├── state  // active/inactive, hidden/visible; JS\r\n└── theme  // added layer of design (colors, fonts); multiple themes, variations on style of components\r\n```\r\n\r\n---\r\n\r\n## Stuff to Avoid\r\n\r\n### [Avoid ID’s](http://oli.jp/2011/ids/)\r\nID’s are really hard. They are to specific and mostly necessary for JS-Hooks. The better way is to use classes.\r\n\r\n### Avoid `!important`\r\nIf you need this, than goes something wrong at your CSS-architecture, because you need this only if you want to overwrite styles. If your structure is clean, than you will don’t need this. It’s like to shot with a cannon to sparrows.\r\n\r\n### Avoid child-selector\r\nWhy I avoid child-selector? It is yet a good CSS-Feature? No I don’t think so. At my start I used it often, but more and more I learned that it makes the module to specific. It depends on the structure of your html, but what is if the order will be changed? **Use classes!**\r\n\r\n```\r\n// Bad example\r\n// Child-selector\r\n.m-tabs > li {}\r\n\r\n// Good example\r\n// Classname\r\n.m-tabs .m-tabs__trigger {}\r\n\r\n// Better example\r\n// Less nesting\r\n.m-tabs__trigger {}\r\n```\r\n\r\n### Avoid *Magic Numbers*\r\n\r\n\"Magic number\" is an old school programming term for *unnamed numerical constant*. Basically, it's just a random number that happens to just work™ yet is not tied to any logical explanation.\r\n\r\nNeedless to say magic numbers are a plague and should be avoided at all costs. When you cannot manage to find a reasonable explanation for why a number works, add an extensive comment explaining how you got there and why you think it works. Admitting you don't know why something works is still more helpful to the next developer than them having to figure out what's going on from scratch.\r\n\r\n```\r\n// 1. Magic number. This value is the lowest I could find to align the top of\r\n `.foo` with its parent. Ideally, we should fix it properly.\r\n */\r\n.foo {\r\n  top: 0.327em; /* 1 */\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}